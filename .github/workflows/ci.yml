name: CI

on:
  pull_request:
  push:
    branches:
      - main

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: -Dwarnings
  MSRV: "1.63"


jobs:
  build_and_test_nix:
    name: Build and test (Nix)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        rust: [nightly, stable]

    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: recursive

    - name: Install ${{ matrix.rust }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true

    - name: check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --bins --tests

    - name: tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all 

  build_and_test_windows:
    name: Build and test (Windows)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        rust: [nightly, stable]
        target:
          - x86_64-pc-windows-gnu
          -  x86_64-pc-windows-msvc

    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: recursive

    - name: Install ${{ matrix.rust }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true

    - uses: msys2/setup-msys2@v2
    - name: check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --bins --tests --target ${{ matrix.target }}

    - name: check bench
      uses: actions-rs/cargo@v1
      if: matrix.rust == 'nightly'
      with:
        command:  check
        target: ${{ matrix.target }}
        args: --benches

    - name: tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all  --target ${{ matrix.target }}

  build_release:
    name: Build release binaries
    runs-on: ${{ matrix.runner }}
    continue-on-error: false
    needs: build_and_test_nix
    if: ${{ always() && github.ref_name=='main' }}
    strategy:
      fail-fast: false
      matrix:
        name: [ubuntu-latest, ubuntu-arm-latest, macOS-latest, macOS-arm-latest]
        rust: [stable]
        experimental: [false]
        include:
          - name: ubuntu-arm-latest
            os: ubuntu-latest
            release-os: linux
            release-arch: aarch64
            runner: [self-hosted, linux, ARM64]
          - name: ubuntu-latest
            os: ubuntu-latest
            release-os: linux
            release-arch: amd64
            runner: [self-hosted, linux, X64]
          - name: macOS-latest
            os: macOS-latest
            release-os: darwin
            release-arch: x86_64
            runner: [self-hosted, macOS, X64]
          - name: macOS-arm-latest
            os: macOS-latest
            release-os: darwin
            release-arch: aarch64
            runner: [self-hosted, macOS, ARM64]
          # - os: windows-latest
          #   release-os: windows
          #   release-arch: amd64
          #   runner: [windows-latest]
    env:
      RUST_BACKTRACE: full
      RUSTV: ${{ matrix.rust }}
    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: recursive

    - name: Set build arch
      run: |
        echo "RELEASE_ARCH=${{ matrix.release-arch }}" >> $GITHUB_ENV
        echo "RELEASE_OS=${{ matrix.release-os }}" >> $GITHUB_ENV

    - name: Install ${{ matrix.rust }}
      run: |
        rustup toolchain install ${{ matrix.rust }}

    - name: build release
      run: |
        cargo build --profile optimized-release

    - name: Setup awscli on linux
      if: matrix.name == 'ubuntu-latest'
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update

    - name: Setup awscli on linux
      if: matrix.name == 'ubuntu-arm-latest'
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update

    - name: Setup awscli on mac
      if: matrix.os == 'macos-latest'
      run: |
        curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
        sudo installer -pkg AWSCLIV2.pkg -target /

    - name: Set aws credentials
      if: matrix.os != 'windows-latest'
      run: |
          echo "AWS_ACCESS_KEY_ID=${{secrets.S3_ACCESS_KEY_ID}}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{secrets.S3_ACCESS_KEY}}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=us-west-2" >> $GITHUB_ENV

    - name: push release
      if: matrix.os != 'windows-latest'
      run: |
        aws s3 cp ./target/optimized-release/iroh s3://vorc/iroh-${RELEASE_OS}-${RELEASE_ARCH}-${GITHUB_SHA::7} --no-progress

    - name: push release latest
      if: matrix.os != 'windows-latest'
      run: |
        aws s3 cp ./target/optimized-release/iroh s3://vorc/iroh-${RELEASE_OS}-${RELEASE_ARCH}-latest --no-progress

  cross:
    name: Cross compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - i686-unknown-linux-gnu
          - arm-linux-androideabi

    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: recursive

    - name: Install nightly
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true

    - name: Install cross
      run: cargo install cross

    - name: check
      run: cross check --all --target ${{ matrix.target }}

    - name: test
      run: cross test --all --target ${{ matrix.target }}

  check_fmt_and_docs:
    name: Checking fmt and docs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - uses: actions-rs/toolchain@v1
      with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

    - name: setup
      run: |
        rustup component add rustfmt
        rustc --version

    - name: fmt
      run: cargo fmt --all -- --check

    - name: Docs
      run: cargo doc

  clippy_check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: actions-rs/toolchain@v1
      with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
    - name: clippy check
      run: cargo clippy --message-format=json --all-features --all-targets

  msrv:
    name: Minimal Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: actions-rs/toolchain@v1
      with:
          profile: minimal
          toolchain: "${{ env.MSRV }}"
          override: true
    - name: Check MSRV all features
      run: |
        cargo +$MSRV check --workspace --all-targets --no-default-features

  cargo_deny:
    name: cargo deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          arguments: --workspace --all-features
          command: check
          command-arguments: "-Dwarnings"
