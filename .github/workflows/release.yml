name: Release

on:
  workflow_dispatch:            # allow manually triggering this workflow
  push:
    tags:
    - "v*"

concurrency:
  group: release-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: -Dwarnings
  RUSTDOCFLAGS: -Dwarnings
  MSRV: "1.72"
  SCCACHE_CACHE_SIZE: "50G"

jobs:
    build_release:
        timeout-minutes: 60
        name: Build release binaries
        runs-on: ${{ matrix.runner }}
        continue-on-error: false
        strategy:
          fail-fast: false
          matrix:
            name: [ubuntu-latest, ubuntu-arm-latest, macOS-latest, macOS-arm-latest, windows-latest]
            rust: [stable]
            experimental: [false]
            include:
              - name: ubuntu-arm-latest
                os: ubuntu-latest
                release-os: linux
                release-arch: aarch64
                runner: [self-hosted, linux, ARM64]
              - name: ubuntu-latest
                os: ubuntu-latest
                release-os: linux
                release-arch: amd64
                runner: [self-hosted, linux, X64]
              - name: macOS-latest
                os: macOS-latest
                release-os: darwin
                release-arch: x86_64
                runner: [self-hosted, macOS, X64]
              - name: macOS-arm-latest
                os: macOS-latest
                release-os: darwin
                release-arch: aarch64
                runner: [self-hosted, macOS, ARM64]
              - name: windows-latest
                os: windows-latest
                release-os: windows
                release-arch: amd64
                runner: [self-hosted, windows, X64]
        env:
          # Using self-hosted runners so use local cache for sccache and
          # not SCCACHE_GHA_ENABLED.
          # RUSTC_WRAPPER: "sccache"
          RUST_BACKTRACE: full
          RUSTV: ${{ matrix.rust }}
        steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            submodules: recursive
    
        - name: Set build arch
          run: |
            echo "RELEASE_ARCH=${{ matrix.release-arch }}" >> $GITHUB_ENV
            echo "RELEASE_OS=${{ matrix.release-os }}" >> $GITHUB_ENV
    
        - name: Install ${{ matrix.rust }}
          run: |
            rustup toolchain install ${{ matrix.rust }}
    
        - name: build release
          run: |
            cargo build --profile optimized-release --all-features

        - name: attach artifacts
          if: matrix.os != 'windows-latest'
          uses: actions/upload-artifact@v4
          with:
            name: iroh-${{env.RELEASE_OS }}-${{env.RELEASE_ARCH}}
            path: target/optimized-release/iroh
            compression-level: 0
        
        - name: attach artifacts
          if: matrix.os == 'windows-latest'
          uses: actions/upload-artifact@v4
          with:
            name: iroh-windows-amd64.exe
            path: target/optimized-release/iroh.exe
            compression-level: 0
    
        - name: Setup awscli on linux
          if: matrix.name == 'ubuntu-latest'
          run: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
    
        - name: Setup awscli on linux
          if: matrix.name == 'ubuntu-arm-latest'
          run: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
    
        - name: Setup awscli on mac
          if: matrix.os == 'macos-latest'
          run: |
            curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
            sudo installer -pkg AWSCLIV2.pkg -target /
    
        - name: Set aws credentials
          if: matrix.os != 'windows-latest'
          run: |
              echo "AWS_ACCESS_KEY_ID=${{secrets.S3_ACCESS_KEY_ID}}" >> $GITHUB_ENV
              echo "AWS_SECRET_ACCESS_KEY=${{secrets.S3_ACCESS_KEY}}" >> $GITHUB_ENV
              echo "AWS_DEFAULT_REGION=us-west-2" >> $GITHUB_ENV
    
        - name: push release
          if: matrix.os != 'windows-latest'
          run: |
            aws s3 cp ./target/optimized-release/iroh s3://vorc/iroh-${RELEASE_OS}-${RELEASE_ARCH}-${GITHUB_SHA::7} --no-progress
            aws s3 cp ./target/optimized-release/derper s3://vorc/derper-${RELEASE_OS}-${RELEASE_ARCH}-${GITHUB_SHA::7} --no-progress
    
        - name: push release latest
          if: matrix.os != 'windows-latest'
          run: |
            aws s3 cp ./target/optimized-release/iroh s3://vorc/iroh-${RELEASE_OS}-${RELEASE_ARCH}-latest --no-progress
            aws s3 cp ./target/optimized-release/derper s3://vorc/derper-${RELEASE_OS}-${RELEASE_ARCH}-latest --no-progress
